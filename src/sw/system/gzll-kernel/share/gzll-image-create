#!/usr/bin/python

# Copyright (c) 2015 by the author(s)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Author(s):
#   Stefan Wallentowitz <stefan.wallentowitz@tum.de>
#   Max Koenen <koenenwmn@googlemail.com>

# Usage:

# Create a configuration file (e.g., image.ini) with the following
# format:
#
# [app0-name]
# path: app0
# tasks: <task0> <task1>
# task0.boot: 0
# task1.boot: 1
#
# <...>
#
# [appi]
# image: <appi.elf>
# tiles: <tileID>,<tileID>,...
#
# kernelsize determines the stack of the kernel
#
# Run: gzll-image-create image.ini

import ConfigParser
import sys
import subprocess
import mmap
import os

def print_usage():
    print "Usage: gzll-image-create <configuration>"

if len(sys.argv) < 2:
    print_usage()
    exit(1)

inifile = sys.argv[1]

print "(I) optimsoc-build-image started with configuration %s" % inifile

conf = ConfigParser.RawConfigParser()
conf.read(inifile)

print "(I) Generate Makefile"

# Open and start Makefile
makefile = open("Makefile", "w")
makefile.write("# Automatically generated with gzll-image-create, do not edit\n\n")
makefile.write("SCRIPTDIR=$(shell pkg-config --variable=buildscriptdir optimsoc-gzll)\n\n")
makefile.write("all: image.elf image.bin image.vmem\n\n")

# Generate list of apps
apps = []
for section in conf.sections():
    path = section
    if conf.has_option(section, "path"):
        path = conf.get(section, "path")
    if not conf.has_option(section, "tasks"):
        continue
    tasks = conf.get(section, "tasks").split(" ")
    boot = []
    for t in tasks:
        tboot = "%s.boot" % t
        if conf.has_option(section, tboot):
            boot.append({ t: [int(x) for x in conf.get(section, tboot).split(" ")]})

    apps.append({ "name": section, "path": path, "tasks": tasks, "boot": boot})

# Generate Makefile entries for apps
objects = []
for a in apps:
    for t in a["tasks"]:
        print "(I)   -> %s" % t
        path = "../../apps/%s/%s.elf" % (a["path"], t)
        objname = "%s_%s" % (a["name"], t)
        objects.append({"path": path, "objname": objname})

makefile.write("APP_BINARY_OBJECTS = ")
for o in objects:
     makefile.write("%s_binary.o " % o["objname"])
makefile.write("\n")

for o in objects:
    makefile.write("%s.bin: %s\n" % (o["objname"], o["path"]))
    makefile.write("\tor1k-elf-objcopy -O binary $^ $@\n")

makefile.write("include $(SCRIPTDIR)/Makefile-images.inc\n")
makefile.close()

print "(I) Generate application information table"
f = open("apps.c", "w")
f.write("#include <gzll-apps.h>\n\n")
for a in apps:
    for t in a["tasks"]:
        tname = "%s_%s" % (a["name"], t)
        f.write("extern void *_binary_%s_bin_start;\n" % tname);
        f.write("extern void *_binary_%s_bin_end;\n" % tname);
    f.write("\n")

    f.write("struct gzll_task_list gzll_%s_tasks = {\n" % (a["name"]))
    f.write("    %d,\n" % len(a["tasks"]))
    f.write("    {\n");
    for t in a["tasks"]:
        tname = "%s_%s" % (a["name"], t)
        f.write("        {\"%s\", (void*) &_binary_%s_bin_start, (void*) &_binary_%s_bin_end },\n" % (t, tname, tname))
    f.write("    }\n");
    f.write("};\n")

f.write("\n")
f.write("struct gzll_application_table gzll_application_table = {\n")
f.write("    %d,\n" % len(apps))
for a in apps:
    f.write("    { \"%s\", &gzll_%s_tasks },\n" % (a["name"], a["name"]))
f.write("};\n");
f.close()

print "(I) Done. Run 'make' to build the image."
